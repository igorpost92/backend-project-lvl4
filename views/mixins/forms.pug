- const getInputName = (f, property) => `${f.name}[${property}]`

mixin formFor(options = {})
  - const url = _.get(options, 'url');
  - const method = _.get(options, 'method', 'get').toLowerCase();
  - const isStandart = _.includes(['get', 'post'], method);
  form.offset-lg-1(action= url method= isStandart ? method : 'post')
    if !isStandart
      input(name='_method' type='hidden' value= method)
    block

mixin input(f, property, options = {})
  - const value = f.object[property] === undefined ? '' : f.object[property];
  - const { label = property, as = 'text' } = options;
  - const errors = f.errors[property];

  .form-group.row
    label.col-lg-2.col-form-label= label
    .col-lg-8
      input(name= property class= cn('form-control', { 'is-invalid': errors }) type=options['as'] value=`${value}`)
      if errors
        .invalid-feedback= errors.map(({ message }) => message).join('. ')

mixin button(type = 'submit')
  - const className = cn('btn', attributes.class);
  - const value = attributes.value || 'Save';

  .form-group
    input(class=`${className}` type=`${type}` value=`${value}`)
